# TODO: verify all the routes
openapi: 3.0.0
info:
  title: My API
  version: 1.0.0
  description: API documentation for managing posts and users.

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /posts:
    get:
      summary: Retrieve all posts
      description: Get a list of all posts.
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          description: Server error
    post:
      summary: Create a new post
      description: Add a new post to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: The created post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '500':
          description: Server error

  /posts/{id}:
    get:
      summary: Retrieve a single post by ID
      description: Get details of a post by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the post to retrieve
      responses:
        '200':
          description: A single post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
        '500':
          description: Server error
    put:
      summary: Update a post by ID
      description: Update an existing post's details.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the post to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '200':
          description: The updated post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
        '500':
          description: Server error
    delete:
      summary: Delete a post by ID
      description: Delete a post from the system by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the post to delete
      responses:
        '204':
          description: Post deleted successfully
        '404':
          description: Post not found
        '500':
          description: Server error

  /users:
    get:
      summary: Retrieve all users
      description: Get a list of all users.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error
    post:
      summary: Create a new user
      description: Add a new user to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Server error

  /users/{id}:
    get:
      summary: Retrieve a single user by ID
      description: Get details of a user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error
    put:
      summary: Update a user by ID
      description: Update an existing user's details.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error
    delete:
      summary: Delete a user by ID
      description: Delete a user from the system by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to delete
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Server error

components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          description: The post ID
          example: 1
        title:
          type: string
          description: The title of the post
          example: My first post
        content:
          type: string
          description: The content of the post
          example: This is the content of my first post.
        published:
          type: boolean
          description: Whether the post is published
          example: false
        authorId:
          type: integer
          description: The ID of the user who created the post
          example: 1
    NewPost:
      type: object
      required:
        - title
        - content
        - authorId
      properties:
        title:
          type: string
          description: The title of the post
          example: My first post
        content:
          type: string
          description: The content of the post
          example: This is the content of my first post.
        published:
          type: boolean
          description: Whether the post is published
          example: false
        authorId:
          type: integer
          description: The ID of the user who created the post
          example: 1
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user ID
          example: 1
        name:
          type: string
          description: The name of the user
          example: John Doe
        email:
          type: string
          description: The email of the user
          example: john.doe@example.com
    NewUser:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: The name of the user
          example: John Doe
        email:
          type: string
          description: The email of the user
          example: john.doe@example.com
